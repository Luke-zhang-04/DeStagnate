/* Destagnate v1.4.2 | Copyright (C) 2020 Luke Zhang https://luke-zhang-04.github.io | MIT License */

"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var DeStagnate = function (e) {
  var t = {};

  function n(r) {
    if (t[r]) {
      return t[r].exports;
    }

    var o = t[r] = {
      i: r,
      l: !1,
      exports: {}
    };
    return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;
  }

  return n.m = e, n.c = t, n.d = function (e, t, r) {
    n.o(e, t) || Object.defineProperty(e, t, {
      enumerable: !0,
      get: r
    });
  }, n.r = function (e) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(e, "__esModule", {
      value: !0
    });
  }, n.t = function (e, t) {
    if (1 & t && (e = n(e)), 8 & t) {
      return e;
    }

    if (4 & t && "object" == _typeof(e) && e && e.__esModule) {
      return e;
    }

    var r = Object.create(null);

    if (n.r(r), Object.defineProperty(r, "default", {
      enumerable: !0,
      value: e
    }), 2 & t && "string" != typeof e) {
      for (var o in e) {
        n.d(r, o, function (t) {
          return e[t];
        }.bind(null, o));
      }
    }

    return r;
  }, n.n = function (e) {
    var t = e && e.__esModule ? function () {
      return e["default"];
    } : function () {
      return e;
    };
    return n.d(t, "a", t), t;
  }, n.o = function (e, t) {
    return Object.prototype.hasOwnProperty.call(e, t);
  }, n.p = "", n(n.s = 1);
}([function (e, t) {
  "use strict";
  /**
   * DeStagnate
   * A simple, ReactJS inspired library to create dynamic components within static sites easier
   * @copyright Copyright (C) 2020 Luke Zhang
   * @author Luke Zhang luke-zhang-04.github.io
   * @license MIT
   * @version 1.4.2
   * @exports createElement
   */

  var r = this && this.__values || function (e) {
    var t = "function" == typeof Symbol && Symbol.iterator,
        n = t && e[t],
        r = 0;

    if (n) {
      return n.call(e);
    }

    if (e && "number" == typeof e.length) {
      return {
        next: function next() {
          return e && r >= e.length && (e = void 0), {
            value: e && e[r++],
            done: !e
          };
        }
      };
    }

    throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
  },
      o = this && this.__read || function (e, t) {
    var n = "function" == typeof Symbol && e[Symbol.iterator];

    if (!n) {
      return e;
    }

    var r,
        o,
        i = n.call(e),
        a = [];

    try {
      for (; (void 0 === t || t-- > 0) && !(r = i.next()).done;) {
        a.push(r.value);
      }
    } catch (e) {
      o = {
        error: e
      };
    } finally {
      try {
        r && !r.done && (n = i["return"]) && n.call(i);
      } finally {
        if (o) {
          throw o.error;
        }
      }
    }

    return a;
  },
      i = this && this.__spread || function () {
    for (var e = [], t = 0; t < arguments.length; t++) {
      e = e.concat(o(arguments[t]));
    }

    return e;
  };

  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t._bindChildren = t._unpackChildren = t._bindProps = void 0, t._bindProps = function (e, t, n) {
    var i, a;

    if (void 0 === n && (n = !1), t) {
      try {
        for (var l = r(Object.entries(t)), c = l.next(); !c.done; c = l.next()) {
          var u = o(c.value, 2),
              f = u[0],
              d = u[1];
          "string" == typeof d || "number" == typeof d ? "innerHTML" === f ? e.innerHTML = d.toString() : n ? e.setAttributeNS(null, f, d.toString()) : e.setAttribute(f, d.toString()) : "on" === f.slice(0, 2) ? "function" == typeof d && e.addEventListener(f.slice(2).toLowerCase(), d) : console.warn('WARN: Invalid prop type "' + _typeof(d) + '" for key "' + f + '". Skipping prop.');
        }
      } catch (e) {
        i = {
          error: e
        };
      } finally {
        try {
          c && !c.done && (a = l["return"]) && a.call(l);
        } finally {
          if (i) {
            throw i.error;
          }
        }
      }
    }
  }, t._unpackChildren = function (e) {
    var n,
        o,
        a = [];

    try {
      for (var l = r(e), c = l.next(), u; !c.done; c = l.next()) {
        u = c.value;
        "object" == _typeof(u) && u instanceof Array ? a.push.apply(a, i(t._unpackChildren(u))) : a.push(u);
      }
    } catch (e) {
      n = {
        error: e
      };
    } finally {
      try {
        c && !c.done && (o = l["return"]) && o.call(l);
      } finally {
        if (n) {
          throw n.error;
        }
      }
    }

    return a;
  }, t._bindChildren = function (e, n) {
    var o, i;

    if (n || 0 === n) {
      if (n instanceof Array) {
        try {
          for (var a = r(n), l = a.next(), c; !l.done; l = a.next()) {
            c = l.value;
            "string" == typeof c || "number" == typeof c ? e.innerText = c.toString() : "object" == _typeof(c) && c instanceof Array ? t._unpackChildren(c).forEach(function (n) {
              return t._bindChildren(e, n);
            }) : e.appendChild(c);
          }
        } catch (e) {
          o = {
            error: e
          };
        } finally {
          try {
            l && !l.done && (i = a["return"]) && i.call(a);
          } finally {
            if (o) {
              throw o.error;
            }
          }
        }
      } else "string" == typeof n || "number" == typeof n ? e.innerText = n.toString() : e.appendChild(n);
    }
  };

  t["default"] = function (e, n, r) {
    for (var o = [], a = 3; a < arguments.length; a++) {
      o[a - 3] = arguments[a];
    }

    var l = document.createElement(e);

    t._bindProps(l, n);

    var c = r;
    return r && o && (c = i("object" == _typeof(r) && r instanceof Array ? t._unpackChildren(r) : [r], t._unpackChildren(o))), t._bindChildren(l, c), l;
  };
}, function (e, t, n) {
  "use strict";
  /**
   * DeStagnate
   * A simple, ReactJS inspired library to create dynamic components within static sites easier
   * @copyright Copyright (C) 2020 Luke Zhang
   * @author Luke Zhang luke-zhang-04.github.io
   * @license MIT
   * @version 1.4.2
   * @exports DeStagnate main destagnate class
   * @file main file for destagnate
   */

  var _r,
      o = this && this.__extends || (_r = function r(e, t) {
    return (_r = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (e, t) {
      e.__proto__ = t;
    } || function (e, t) {
      for (var n in t) {
        t.hasOwnProperty(n) && (e[n] = t[n]);
      }
    })(e, t);
  }, function (e, t) {
    function n() {
      this.constructor = e;
    }

    _r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
  }),
      i = this && this.__values || function (e) {
    var t = "function" == typeof Symbol && Symbol.iterator,
        n = t && e[t],
        r = 0;

    if (n) {
      return n.call(e);
    }

    if (e && "number" == typeof e.length) {
      return {
        next: function next() {
          return e && r >= e.length && (e = void 0), {
            value: e && e[r++],
            done: !e
          };
        }
      };
    }

    throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
  },
      a = this && this.__importDefault || function (e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  };

  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.createElementNS = t.createElement = void 0;

  var l = a(n(2)),
      c = a(n(0)),
      u = a(n(3)),
      f = function (e) {
    function t(n, r) {
      var o = e.call(this) || this;
      return o.props = r, o.createElement = t.createElement, o.createElementNS = t.createElementNS, o._state = {}, o._didSetInitialState = !1, o.getSnapshotBeforeUpdate = function (e, t) {
        return [e, t];
      }, o.setState = function (e) {
        var t, n, r, a;

        try {
          o.componentWillUpdate();

          try {
            for (var l = i(Object.keys(e)), c = l.next(), u; !c.done; c = l.next()) {
              u = c.value;
              Object.keys(o.state).includes(u) || console.warn("WARN: New key (" + u + ") should not be set with setState, which has keys " + JSON.stringify(Object.keys(o.state)) + ". Declare all state variables in constructor as a best practice.");
            }
          } catch (e) {
            t = {
              error: e
            };
          } finally {
            try {
              c && !c.done && (n = l["return"]) && n.call(l);
            } finally {
              if (t) {
                throw t.error;
              }
            }
          }

          o.getSnapshotBeforeUpdate(o.props, o.state), Object.assign(o._state, e);

          var f = o._execRender();

          if ("object" == _typeof(f) && f instanceof Array) {
            try {
              for (var d = i(f), s = d.next(), p; !s.done; s = d.next()) {
                p = s.value;

                o._parent.appendChild(p);
              }
            } catch (e) {
              r = {
                error: e
              };
            } finally {
              try {
                s && !s.done && (a = d["return"]) && a.call(d);
              } finally {
                if (r) {
                  throw r.error;
                }
              }
            }
          } else f && o._parent.appendChild(f);

          o.componentDidUpdate();
        } catch (e) {
          return o.componentDidCatch(e), e;
        }
      }, o.mountComponent = function () {
        try {
          var e = o.render();

          if (o._didSetInitialState = !0, o.componentWillMount(), null === e) {
            throw new Error("Expected render method to be included in component class, no render method found, or render returned an empty array");
          }

          return o.componentDidMount(), "object" == _typeof(e) && e instanceof Array ? e.map(function (e) {
            return o._parent.appendChild(e);
          }) : o._parent.appendChild(e);
        } catch (e) {
          return o.componentDidCatch(e), e;
        }
      }, o.mount = o.mountComponent, o.unmountComponent = function () {
        try {
          o.componentWillUnmount(), o._removeChildren();
        } catch (e) {
          o.componentDidCatch(e);
        }
      }, o.unmount = o.unmountComponent, o._removeChildren = function () {
        for (; o._parent.firstChild && o._parent.lastChild;) {
          o._parent.removeChild(o._parent.lastChild);
        }
      }, o._execRender = function () {
        return o._removeChildren(), o.render();
      }, ["body", "html"].includes(n.tagName.toLowerCase()) && console.warn("WARNING! Avoid using " + n.tagName.toLowerCase() + " as element parent, as all elements within " + n.tagName.toLowerCase() + " will be removed on re-render"), o._parent = n, o;
    }

    return o(t, e), Object.defineProperty(t.prototype, "getState", {
      get: function get() {
        return this.state;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(t.prototype, "state", {
      get: function get() {
        return this._state;
      },
      set: function set(e) {
        this._didSetInitialState ? (this.componentDidCatch(new Error("Do not mutate state directly. Use setState instead.")), console.warn("DeStagnate protects you from mutating the entire state object. Avoid mutating state directly"), this.setState(e)) : (this._state = e, this._didSetInitialState = !0);
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(t.prototype, "getProps", {
      get: function get() {
        return this.props;
      },
      enumerable: !1,
      configurable: !0
    }), t.createElement = c["default"], t.createElementNS = u["default"], t;
  }(l["default"]);

  t["default"] = f, t.createElement = c["default"], t.createElementNS = u["default"];
}, function (e, t) {
  "use strict";
  /**
   * DeStagnate
   * A simple, ReactJS inspired library to create dynamic components within static sites easier
   * @copyright Copyright (C) 2020 Luke Zhang
   * @author Luke Zhang luke-zhang-04.github.io
   * @license MIT
   * @version 1.4.2
   * @exports Preset
   * @package
   */

  Object.defineProperty(t, "__esModule", {
    value: !0
  });

  t["default"] = function r() {
    this.componentDidCatch = function (e) {
      return console.error(e);
    }, this.componentDidMount = function () {}, this.componentDidUpdate = function () {}, this.componentWillMount = function () {}, this.componentWillUnmount = function () {}, this.componentWillUpdate = function () {}, this.render = function () {
      return null;
    };
  };
}, function (e, t, n) {
  "use strict";
  /**
   * DeStagnate
   * A simple, ReactJS inspired library to create dynamic components within static sites easier
   * @copyright Copyright (C) 2020 Luke Zhang
   * @author Luke Zhang luke-zhang-04.github.io
   * @license MIT
   * @version 1.4.2
   * @exports createElementNS
   */

  var r = this && this.__read || function (e, t) {
    var n = "function" == typeof Symbol && e[Symbol.iterator];

    if (!n) {
      return e;
    }

    var r,
        o,
        i = n.call(e),
        a = [];

    try {
      for (; (void 0 === t || t-- > 0) && !(r = i.next()).done;) {
        a.push(r.value);
      }
    } catch (e) {
      o = {
        error: e
      };
    } finally {
      try {
        r && !r.done && (n = i["return"]) && n.call(i);
      } finally {
        if (o) {
          throw o.error;
        }
      }
    }

    return a;
  },
      o = this && this.__spread || function () {
    for (var e = [], t = 0; t < arguments.length; t++) {
      e = e.concat(r(arguments[t]));
    }

    return e;
  };

  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.createElementNS = void 0;
  var i = n(0);
  t.createElementNS = function (e, t, n, r) {
    for (var a = [], l = 4; l < arguments.length; l++) {
      a[l - 4] = arguments[l];
    }

    var c = document.createElementNS(e, t);

    i._bindProps(c, n, !0);

    var u = r;
    return r && a && (u = o("object" == _typeof(r) && r instanceof Array ? i._unpackChildren(r) : [r], i._unpackChildren(a))), i._bindChildren(c, u), c;
  }, t["default"] = t.createElementNS;
}]);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
